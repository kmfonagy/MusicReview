"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.registerAllTest = registerAllTest;
exports.initMocks = initMocks;
exports.deinitMocks = deinitMocks;

var _annotations = require("./annotations");

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function sent() {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) {
            try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
        }if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = undefined && undefined.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) {
        ar = ar.concat(__read(arguments[i]));
    }return ar;
};
function registerAllTest(token, type, context) {
    var _this = this;
    if (Reflect.hasMetadata(_annotations.testsToken, type)) {
        var keys = Reflect.getMetadata(_annotations.testsToken, type);
        var _loop_1 = function _loop_1(i) {
            var name_1 = keys[i];
            it(name_1, function () {
                var bean = context.getBean(token);
                var f = bean[name_1];
                f.call(bean, context);
            });
        };
        for (var i = 0; i < keys.length; ++i) {
            _loop_1(i);
        }
    }
    if (Reflect.hasMetadata(_annotations.asyncTestsToken, type)) {
        var keys = Reflect.getMetadata(_annotations.asyncTestsToken, type);
        var _loop_2 = function _loop_2(i) {
            var name_2 = keys[i];
            it(name_2, function () {
                return __awaiter(_this, void 0, void 0, function () {
                    var bean, f;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                bean = context.getBean(token);
                                f = bean[name_2];
                                return [4 /*yield*/, f.call(bean, context)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            });
        };
        for (var i = 0; i < keys.length; ++i) {
            _loop_2(i);
        }
    }
}
function initMocks(token, type, context) {
    var obj = context.getBean(token);
    if (Reflect.hasMetadata(_annotations.spiesToken, type)) {
        var keys = Reflect.getMetadata(_annotations.spiesToken, type);
        for (var i = 0; i < keys.length; ++i) {
            var name_3 = keys[i];
            var spy = jest.spyOn(obj, name_3);
            if (!Reflect.hasMetadata(_annotations.spiesValuesToken, obj)) {
                Reflect.defineMetadata(_annotations.spiesValuesToken, [spy], obj);
            } else {
                var spies = Reflect.getMetadata(_annotations.spiesValuesToken, obj);
                Reflect.defineMetadata(_annotations.spiesValuesToken, __spread([spy], spies), obj);
            }
        }
    }
    if (Reflect.hasMetadata(_annotations.spiesOnGetToken, type)) {
        var keys = Reflect.getMetadata(_annotations.spiesOnGetToken, type);
        for (var i = 0; i < keys.length; ++i) {
            var name_4 = keys[i];
            var spy = jest.spyOn(obj, name_4, "get");
            if (!Reflect.hasMetadata(_annotations.spiesValuesToken, obj)) {
                Reflect.defineMetadata(_annotations.spiesValuesToken, [spy], obj);
            } else {
                var spies = Reflect.getMetadata(_annotations.spiesValuesToken, obj);
                Reflect.defineMetadata(_annotations.spiesValuesToken, __spread([spy], spies), obj);
            }
        }
    }
}
function deinitMocks(token, type, context) {
    var obj = context.getBean(token);
    if (Reflect.hasMetadata(_annotations.spiesValuesToken, obj)) {
        var keys = Reflect.getMetadata(_annotations.spiesValuesToken, obj);
        for (var i = 0; i < keys.length; ++i) {
            var spy = keys[i];
            spy.mockRestore();
        }
    }
}
//# sourceMappingURL=tools.js.map