"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Test = Test;
exports.AsyncTest = AsyncTest;
exports.Spy = Spy;
exports.SpyOnGet = SpyOnGet;
//
// Types
//
var __read = undefined && undefined.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) {
        ar = ar.concat(__read(arguments[i]));
    }return ar;
};
var testsToken = exports.testsToken = Symbol();
var asyncTestsToken = exports.asyncTestsToken = Symbol();
var spiesToken = exports.spiesToken = Symbol();
var spiesValuesToken = exports.spiesValuesToken = Symbol();
var spiesOnGetToken = exports.spiesOnGetToken = Symbol();
//
// @Test
//
function Test(target, key, descriptor) {
    var destination = target.constructor;
    var keys = Reflect.getMetadata(testsToken, destination) || [];
    Reflect.defineMetadata(testsToken, __spread([key], keys), destination);
}
//
// @AsyncTest
//
function AsyncTest(target, key, descriptor) {
    var destination = target.constructor;
    var keys = Reflect.getMetadata(asyncTestsToken, destination) || [];
    Reflect.defineMetadata(asyncTestsToken, __spread([key], keys), destination);
}
//
// @Spy
//
function Spy(target, key, descriptor) {
    var destination = target.constructor;
    var keys = Reflect.getMetadata(spiesToken, destination) || [];
    Reflect.defineMetadata(spiesToken, __spread([key], keys), destination);
}
//
// @SpyOnGet
//
function SpyOnGet(target, key, descriptor) {
    var destination = target.constructor;
    var keys = Reflect.getMetadata(spiesOnGetToken, destination) || [];
    Reflect.defineMetadata(spiesOnGetToken, __spread([key], keys), destination);
}
//# sourceMappingURL=annotations.js.map